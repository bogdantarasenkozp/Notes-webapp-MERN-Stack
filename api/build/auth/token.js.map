{"version":3,"sources":["../../src/auth/token.js"],"names":["redis","redisGetAsync","get","redisSetexAsync","setex","signAsync","sign","randomBytesAsync","randomBytes","generateJwtId","jti","Promise","resolve","toString","reject","generateTokens","payload","secret","opts","auth","accessTokenId","refreshTokenId","accessTokenPayload","Object","assign","refreshTokenPayload","ati","refreshTokenOpts","expiresIn","refreshTokenTtl","accessTokenOpts","accessTokenTtl","refreshToken","accessToken","user","username"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,IAAMA,QAAQ,0BAAd;;AAEA,IAAMC,gBAAgB,4BAAUD,MAAME,GAAhB,EAAqBF,KAArB,CAAtB;AACA,IAAMG,kBAAkB,4BAAUH,MAAMI,KAAhB,EAAuBJ,KAAvB,CAAxB;AACA,IAAMK,YAAY,4BAAU,uBAAIC,IAAd,yBAAlB;AACA,IAAMC,mBAAmB,4BAAU,iBAAOC,WAAjB,mBAAzB;;AAEA,IAAMC;AAAA,uDAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEFF,iBAAiB,EAAjB,CAFE;;AAAA;AAEdG,eAFc;AAAA,6CAGXC,QAAQC,OAAR,CAAgBF,IAAIG,QAAJ,CAAa,KAAb,CAAhB,CAHW;;AAAA;AAAA;AAAA;AAAA,6CAKXF,QAAQG,MAAR,aALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AASO,IAAMC;AAAA,wDAAiB,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA,QAAwBC,IAAxB,uEAA+B,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGlBC,gBAHkB,oBAGlBA,IAHkB;AAAA;AAAA,mBAKEV,eALF;;AAAA;AAKpBW,yBALoB;AAAA;AAAA,mBAMGX,eANH;;AAAA;AAMpBY,0BANoB;AAQpBC,8BARoB,GAQCC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,OAAlB,EAA2B,EAAEN,KAAKU,aAAP,EAA3B,CARD;AASpBK,+BAToB,GASEF,OAAOC,MAAP,CAAc,EAAd,EAAkB;AAC5Cd,mBAAKW,cADuC;AAE5CK,mBAAKN;AAFuC,aAAlB,CATF;AAcpBO,4BAdoB,GAcDJ,OAAOC,MAAP,CAAc,EAAd,EAAkB;AACzCI,yBAAWT,KAAKU;AADyB,aAAlB,EAEtBX,IAFsB,CAdC;AAiBpBY,2BAjBoB,GAiBFP,OAAOC,MAAP,CAAc,EAAd,EAAkB;AACxCI,yBAAWT,KAAKY;AADwB,aAAlB,EAErBb,IAFqB,CAjBE;AAAA;AAAA,mBAqBCb,UAAUoB,mBAAV,EAA+BR,MAA/B,EAAuCU,gBAAvC,CArBD;;AAAA;AAqBpBK,wBArBoB;AAAA;AAAA,mBAsBA3B,UAAUiB,kBAAV,EAA8BL,MAA9B,EAAsCa,eAAtC,CAtBA;;AAAA;AAsBpBG,uBAtBoB;AAAA;AAAA,mBAwBpB9B,gBAAgBkB,cAAhB,EAAgCF,KAAKU,eAArC,EAAsDb,QAAQkB,IAAR,CAAaC,QAAnE,CAxBoB;;AAAA;AAAA,8CA0BnBxB,QAAQC,OAAR,CAAgB;AACrBqB,sCADqB;AAErBD;AAFqB,aAAhB,CA1BmB;;AAAA;AAAA;AAAA;AAAA,8CAiCnBrB,QAAQG,MAAR,cAjCmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"token.js","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport promisify from \"es6-promisify\";\nimport { createClient, print } from \"redis\";\nimport config from \"../config/config\";\n\nconst redis = createClient();\n\nconst redisGetAsync = promisify(redis.get, redis);\nconst redisSetexAsync = promisify(redis.setex, redis);\nconst signAsync = promisify(jwt.sign, jwt);\nconst randomBytesAsync = promisify(crypto.randomBytes, crypto);\n\nconst generateJwtId = async () => {\n  try {\n    let jti = await randomBytesAsync(32);\n    return Promise.resolve(jti.toString(\"hex\"));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nexport const generateTokens = async (payload, secret, opts = {}) => {\n  try {\n\n    const { auth } = config;\n\n    const accessTokenId = await generateJwtId();\n    const refreshTokenId = await generateJwtId();\n\n    const accessTokenPayload = Object.assign({}, payload, { jti: accessTokenId });\n    const refreshTokenPayload = Object.assign({}, {\n      jti: refreshTokenId,\n      ati: accessTokenId\n    });\n\n    const refreshTokenOpts = Object.assign({}, {\n      expiresIn: auth.refreshTokenTtl\n    }, opts);\n    const accessTokenOpts = Object.assign({}, {\n      expiresIn: auth.accessTokenTtl\n    }, opts);\n\n    const refreshToken = await signAsync(refreshTokenPayload, secret, refreshTokenOpts);\n    const accessToken = await signAsync(accessTokenPayload, secret, accessTokenOpts);\n\n    await redisSetexAsync(refreshTokenId, auth.refreshTokenTtl, payload.user.username);\n\n    return Promise.resolve({\n      accessToken,\n      refreshToken\n    });\n\n  } catch(e) {\n\n    return Promise.reject(e);\n\n  }\n};\n"]}