{"version":3,"sources":["../../src/auth/passport.js"],"names":["use","username","password","done","console","log","verified","message","localAuthHandler","ctx","next","request","body","login","authenticate","err","user","info","status","accessToken","refreshToken","throw"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,sBAASA,GAAT,CACE,4BACE,UAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA8B;AAC5B,MAAIF,aAAa,MAAb,IAAuBC,aAAa,MAAxC,EAAgD;AAC9CE,YAAQC,GAAR,CAAY,CAAZ;AACAF,SAAK,IAAL,EAAW;AACTF,gBAAU,MADD;AAETK,gBAAU;AAFD,KAAX,EAGG,EAAEC,SAAS,SAAX,EAHH;AAID,GAND,MAMO,IAAIN,aAAa,MAAb,IAAuBC,aAAa,MAAxC,EAAgD;AACrDC,SAAK,IAAL,EAAW,KAAX,EAAkB,EAAEI,SAAS,iCAAX,EAAlB;AACD;AACF,CAXH,CADF;;AAgBO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,IAAN,EAAe;AAC7CN,UAAQC,GAAR,CAAYI,IAAIE,OAAJ,CAAYC,IAAxB;AACAR,UAAQC,GAAR,CAAYI,IAAIE,OAAJ,CAAYC,IAAZ,CAAiBC,KAA7B;AACA,SAAO,sBAASC,YAAT,CAAsB,OAAtB;AAAA,yDAA+B,iBAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAChCD,SAAS,KADuB;AAAA;AAAA;AAAA;;AAElCP,kBAAIS,MAAJ,GAAa,GAAb;AACAT,kBAAIG,IAAJ,GAAWK,KAAKV,OAAhB;AAHkC;AAAA;;AAAA;AAAA;AAAA;AAAA,qBAMY,2BAAe,EAACS,UAAD,EAAf,EAAuB,QAAvB,CANZ;;AAAA;AAAA;AAMxBG,yBANwB,SAMxBA,WANwB;AAMXC,0BANW,SAMXA,YANW;;AAOhCX,kBAAIG,IAAJ,GAAW;AACTO,wCADS;AAETC;AAFS,eAAX;AAPgC;AAAA;;AAAA;AAAA;AAAA;;AAYhCX,kBAAIY,KAAJ,CAAU,GAAV;;AAZgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA,OAeJZ,GAfI,EAeCC,IAfD,CAAP;AAgBD,CAnBM","file":"passport.js","sourcesContent":["import passport from \"koa-passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { generateTokens } from \"./token\";\n\npassport.use(\n  new LocalStrategy(\n    (username, password, done) => {\n      if (username === \"test\" && password === \"test\") {\n        console.log(1);\n        done(null, {\n          username: \"test\",\n          verified: \"true\"\n        }, { message: 'Success' });\n      } else if (username !== \"test\" || password !== \"test\") {\n        done(null, false, { message: 'Incorrect username or password.' });\n      }\n    }\n  )\n);\n\nexport const localAuthHandler = (ctx, next) => {\n  console.log(ctx.request.body)\n  console.log(ctx.request.body.login)\n  return passport.authenticate('local', async (err, user, info) => {\n    if (user === false) {\n      ctx.status = 401;\n      ctx.body = info.message;\n    } else {\n      try {\n        const { accessToken, refreshToken } = await generateTokens({user}, \"secret\");\n        ctx.body = {\n          accessToken,\n          refreshToken\n        }\n      } catch (e) {\n        ctx.throw(500, e);\n      }\n    }\n  })(ctx, next);\n};\n\nexport default passport;\n"]}